#include <iostream>
#include "board.h"

using namespace std;

//destructer
Board::~Board()
{
  delete [] pieces;
  delete [] column;
  delete [] row;
}

int Board::getSideSize()
{
  return SIDE_SIZE;
}

//Initialize arrays
bool Board::initialize()
{
  pieces = new int[SIDE_SIZE * SIDE_SIZE];
  row[26] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26};
  column[26] = "abcdefghijklmnopqrstuvwxyz";
  return true;
}

//print board function
void Board::printBoard()
{
  int s = getSideSize();
  //Output the column labels
  //Prime row
  cout << "    ";
  //Output labels
  for(int c = 0; c < s; ++c)
    {
      cout << " " << column[c];
      if(c < (s - 1))
	{
	  cout << "  ";
	}
    }
  cout << endl;

  //Print first border
  printBorder();

  //Print rows
  for(int r = 0; r < s; ++r)
    {
      //Output Row Label
      if(row[r] < 10)
	{
	  cout << " ";
	}
      cout << row[r] << " |";
      //Print columns
      for(int col = 0; col < s; ++col)
	{
	  cout << " ";
	  //If piece is 0, output " "; if piece is 1, output "D"; if piece is 2, output "L"
	  if(pieces[(r*s) + col] == 1)
	    {
	      cout << "D";
	    }
	  else if(pieces[(r*s) + col] == 2)
	    {
	      cout << "L";
	    }
	  else
	    {
	      cout << " ";
	    }
	  cout << " |";
	}
      cout << endl;
      printBorder();
    }
}

//Add Move Function
bool Board::addMove(int col, int row, int player)
{
  if(player != 0 || player != 1 || player != 2)
    {
      return false;
    }
  if(col < 0 || row < 0)
    {
      return false;
    }
  if(col >= getSideSize() || row >= getSideSize())
    {
      return false;
    }
  pieces[(row * getSideSize()) + col] = player;
  return true;
}

//Helper Functions
//Print the +---+ border between rows
void Board::printBorder()
{
  //Prime output
  cout << "   +";

  //For each column, print the ---+ border
  for(int c = 0; c < SIDE_SIZE; ++c)
    {
      cout << "---+";
    }
  cout << endl;
}
